#!/usr/bin/env node

/*jslint node: true*/
var fs = require("fs");
var path = require("path");
var startTime, endTime;

var config = {
  db: {
    usecradlesecurity: false,
    drop: false,
    serverurl: "http://localhost",
    serverport: 5984,
    name: null,
    secure: false,
    auth: {
      username: null,
      password: null
    },
    bucketpassword: "addison123",
    type: "couchdb"
  },
  exclude: [],
  outputFile: null,
  inputFile: null,
  verbose: false,
  bulkSave: false
};

function outPutUtilityInfo() {
  console.log("couchrestore v: 1.0\r\n\tDevelop By: Corey Gaspard\r\n\tLicense:GPL");
}

function outputUsageData() {
  console.log("\tUsage Example: couchrestore --host:http://localhost --port:5984 --db:dbname --user:username --password:1password --input:filepath --v --drop");
  console.log("\t\tNote: This utility will not overwrite an existing database unless you specify the --drop parameter");
  console.log("\t\t--help\t\tShow this message");
  console.log("\t\t--bulk\t\tBulk save");
  console.log("\t\t--host\t\tURL to the server");
  console.log("\t\t--port\t\tPort that couch db is listening on");
  console.log("\t\t--db\t\tName of the database to backup");
  console.log("\t\t--user\t\tUser account used when performing hte backup");
  console.log("\t\t--password\tPassword for the user account");
  console.log("\t\t--input\tPath to restore file");
  console.log("\t\t--drop\t\tDrop the database if it already exists");
  console.log("\t\t--v\t\tVerbose output");
}

if (process.argv.length === 2) {
  outPutUtilityInfo();

  outputUsageData();
  return;
}

for (var i = 0; i < process.argv.length; i++) {
  var arg = process.argv[i];

  if (arg.indexOf("--host") === 0) {
    var start = "--host:";
    arg = arg.replace(start, "");
    config.db.serverurl = arg;

    if (arg.indexOf("http") >= 0) {
      config.db.hostname = arg.replace("http://", "").replace("https://", "");
    }
  }

  if (arg.indexOf("--port") === 0) {
    var start = "--port:";
    arg = arg.replace(start, "");
    config.db.serverport = arg;
  }

  if (arg.indexOf("--db") === 0) {
    var start = "--db:";
    arg = arg.replace(start, "");
    config.db.name = arg;
  }

  if (arg.indexOf("--user") === 0) {
    var start = "--user:";
    arg = arg.replace(start, "");
    config.db.auth.username = arg;
  }

  if (arg.indexOf("--password") === 0) {
    var start = "--password:";
    arg = arg.replace(start, "");
    config.db.auth.password = arg;
  }

  if (arg.indexOf("--bulk") === 0) {
    config.bulkSave = true;
  }

  if (arg.indexOf("--input") === 0) {
    var start = "--input:";
    arg = arg.replace(start, "");
    config.inputFile = arg;
  }

  if (arg.indexOf("--help") === 0) {
    outPutUtilityInfo();
    outputUsageData();
    return;
  }

  if (arg.indexOf("--drop") === 0) {
    config.db.drop = true;
  }

  if (arg.indexOf("--v") === 0) {
    config.verbose = true;
  }
}
if (/https/i.test(config.db.serverurl)) {
  config.db.secure = true;
}

if (config.verbose) {
  console.log("Server URL: " + config.db.serverurl);
  console.log("Server Port: " + config.db.serverport);
  console.log("Secure HTTPS: " + config.db.secure);
  console.log("Database: " + config.db.name);
  console.log("Input File: " + config.inputFile);
}

var docs = require(config.inputFile);

var db = null;
if (config.db.type === undefined) {
  config.db.type = "couchdb";
}

var dbName = config.db.name;
if (config.db.type === "couchdb") {
  /// We're using couchdb
  db = require('../server/datadrivers/couchdb.js')(config);
} else if (config.db.type === "couchbase") {
  db = require('../server/datadrivers/couchbase.js')(config);
}

// Step 1 Check DB exists
db.exists(function (err, exists) {
  if (err) {
    console.log('Error:', err);
    return;
  } else if (exists) {
    if (config.db.drop) {
      console.log("DB Exists Dropping:", exists);
      db.destroy(function (err, result) {
        if(err) {
          console.log("Error Dropping DB:", err);
        } else {
          console.log("Dropped database " + dbName);
          db.create(function () {
            console.log("Re-created database " + dbName);
            startTime = new Date();
            console.log("Restore Started At:", startTime.toJSON());
            if(config.bulkSave) {
              saveDocsBulk();
            } else {
              saveDocs();
            }
          });
        }
      });
    } else {
      console.log('DB exists. Drop the existing database first.');
      return;
    }
  } else {
    console.log('Creating DB');
    if (config.db.type === "couchdb") {
      db = require('../server/datadrivers/couchdb.js')(config);
    } else if (config.db.type === "couchbase") {
      db = require('../server/datadrivers/couchbase.js')(config);
    }
    db.create(function (err, result) {
      if (err) {
        console.log("ERR: " + err);
        return;
      } else {
        startTime = new Date();
        console.log("Restore Started At:", startTime.toJSON());
        if(config.bulkSave) {
          saveDocsBulk();
        } else {
          saveDocs();
        }
      }
    });

  }
});

var total = docs.length;
var counter = 0;

function saveDocsBulk() {
  console.log("Saving Docs Bulk: " + docs.length);
  db.save(docs, function (err, result) {
    if (err) {
      console.log('error', err);
    } else {
      console.log(result);
      console.log("Done!!");
      endTime = new Date();
      console.log("Restore Ended At:", endTime.toJSON());
      var dif = startTime.getTime() - endTime.getTime();
      var Seconds_from_T1_to_T2 = dif / 1000;
      var Seconds_Between_Dates = Math.abs(Seconds_from_T1_to_T2);
      console.log("Done in " + Seconds_Between_Dates + " seconds!!");

      db.disconnect();
      process.exit();
      return;
    }
  });
}

function saveDocs() {

  console.log("Saving Docs: " + docs.length);

  saveDoc(docs.pop());

  function saveDoc(doc) {

    counter++;

    if (config.verbose) {
      if (doc._id !== undefined) {
        console.log("Saving Doc ID: " + doc._id + " " + counter + "/" + total);
      } else if (doc.name !== undefined) {
        console.log("Saving View: " + doc.name + " " + counter + "/" + total);
      } else {
        console.log("Saving Doc: " + counter + "/" + total);
      }
    }

    try {
      delete doc._rev;
    } catch (e) {}

    db.save(doc, function (err) {
      if (err) {
        console.log('error', err);
      }
      if (docs.length === 0) {
        endTime = new Date();
        console.log("Restore Ended At:", endTime.toJSON());
        var dif = startTime.getTime() - endTime.getTime();
        var Seconds_from_T1_to_T2 = dif / 1000;
        var Seconds_Between_Dates = Math.abs(Seconds_from_T1_to_T2);
        console.log("Done in " + Seconds_Between_Dates + " seconds!!");
        db.disconnect();
        process.exit();
        return;
      }

      saveDoc(docs.pop());
    });

  }
}
